import type {PatchEvent, SanityClient, SanityDocument} from 'sanity'

export type VariableStatus = 'resolved' | 'unresolved' | 'defaulted'

export type ValidTypes = 'string' | 'array' | 'image' | 'portableText' | 'unknown'

export type PromptVariableType = {
  _key: string
  name: string
  value:
    | string
    | boolean
    | number
    | Array<{_key: string; name: string; value: string | boolean | number}>
    | null
    | undefined
}

export type ResolvedFieldPrompt = {
  fieldPath: string
  fieldType: ValidTypes
  prompt: string | null
  promptId: string
  promptName: string
  promptDescription: string
}

export type PromptValue =
  | string
  | boolean
  | number
  | Array<Record<string, string | boolean | number>>
  | null

export type PromptVariableConfig = {
  _key: string
  variableName: string
  helpText?: string
  defaultValue?: PromptVariableType['value']
}

export interface PromptDocument extends SanityDocument {
  title: string
  prompt: string
  description: string
  variablesConfig?: Array<PromptVariableConfig>
}

export type FieldPromptType = {
  _key: string
  fieldPath: string
  prompt: {_ref: string}
  variables?: Array<PromptVariableType>
}

export type AIFieldMappingType = SanityDocument & {
  variables: Array<PromptVariableType>
  fieldPrompts: Array<FieldPromptType>
  unifiedPrompt: {_ref: string}
}

export type ApiKey = string | ((client: SanityClient) => Promise<string>)
export interface ChatGPTAssistConfig {
  apiKey?: ApiKey
  apiUrl?: string
  supportedDocuments: Array<string>
}

export type ChatGPTAPIMessage = {
  role: 'user' | 'assistant' | 'developer'
  content: string
}

export interface ChatGPTMessage {
  _key: string
  role: 'user' | 'assistant' | 'developer'
  content: string
  timestamp: string // ISO 8601 string
}

export type GenerateContentDialogProps = {
  id: string
  type: string
  draft: SanityDocument | null
  published: SanityDocument | null
  onGenerate: (event: PatchEvent) => void
  onCancel: () => void
  pluginConfig: ChatGPTAssistConfig
}

// Autogenerated types from `sanity typegen generate`
export declare const internalGroqTypeReferenceTo: unique symbol

export type AiVariables = Array<
  | {
      name?: string
      value?: string
      _type: 'stringVariable'
      _key: string
    }
  | {
      name?: string
      value?: boolean
      _type: 'booleanVariable'
      _key: string
    }
  | {
      name?: string
      value?: number
      _type: 'numberVariable'
      _key: string
    }
  | {
      name?: string
      value?: Array<{
        name?: string
        value?: string
        _key: string
      }>
      _type: 'arrayVariable'
      _key: string
    }
>

export type AiFieldMapping = {
  _type: 'aiFieldMapping'
  variables?: AiVariables
  fieldPrompts?: Array<{
    fieldPath?: string
    prompt?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'aiPrompt'
    }
    variables?: AiVariables
    _key: string
  }>
  unifiedPrompt?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'aiPrompt'
  }
}

export type AiPrompt = {
  _id: string
  _type: 'aiPrompt'
  _createdAt: string
  _updatedAt: string
  _rev: string
  type?: 'unified' | 'field'
  title?: string
  prompt?: string
  description?: string
  variablesConfig?: Array<
    | {
        variableName?: string
        helpText?: string
        defaultValue?: string
        _type: 'stringVariable'
        _key: string
      }
    | {
        variableName?: string
        helpText?: string
        defaultValue?: boolean
        _type: 'booleanVariable'
        _key: string
      }
    | {
        variableName?: string
        helpText?: string
        defaultValue?: number
        _type: 'numberVariable'
        _key: string
      }
    | {
        variableName?: string
        helpText?: string
        defaultValue?: Array<{
          name?: string
          value?: string
          _key: string
        }>
        _type: 'arrayVariable'
        _key: string
      }
  >
}

declare module 'sanity' {
  // eslint-disable-next-line no-shadow
  interface IntrinsicDefinitions {
    aiVariables: AiVariables
    aiPrompt: AiPrompt
    aiFieldMapping: AiFieldMapping
  }
}
